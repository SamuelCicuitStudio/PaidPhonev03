### Secure Login System: Step-by-Step Exercise  
This exercise guides you through building a secure login system using HTML, JavaScript, Node.js, and MySQL running on XAMPP. You'll learn how to connect a web page to a backend server, securely authenticate users, and test the application with a local database.

---

### **Step 1: Create Folder Structure**

Before starting, create the following folder structure in your project directory:

```
PAIDPHONE/
├── backend/
│   ├── api/
│   │   ├── routes/
│   │   │   └── auth.js          # Authentication route
│   │   ├── controllers/
│   │   │   └── AuthController.js # Authentication logic
│   │   ├── models/
│   │   │   └── Admin.js         # Admin model for DB interaction
│   ├── config/
│   │   └── db.js                # Database connection
│   ├── server.js                # Express server setup
│   └── .env                     # Environment variables
├── database/
│   └── schema.sql               # SQL schema for creating the database
├── public/
│   ├── index.html               # Login page HTML
│   ├── login.js                 # JavaScript for login logic
│   ├── style.css                # Styles for the login page
```

---

### **Step 2: Database Setup with XAMPP**  
We’ll use **MariaDB** running in XAMPP as the local database.

1. **Start XAMPP Server:**  
   - Open XAMPP Control Panel.
   - Start the **Apache** and **MySQL** services.

2. **Access phpMyAdmin:**  
   - Open your browser and navigate to `http://127.0.0.1/phpmyadmin`.

3. **Create a Database:**  
   - In phpMyAdmin, click **New**, and create a database named `paidphone` with collation `utf8mb4_general_ci`.

4. **Create the `admins` Table:**  
   - Run the following SQL query in phpMyAdmin:
     ```sql
     CREATE TABLE admins (
         id INT AUTO_INCREMENT PRIMARY KEY,
         username VARCHAR(255) UNIQUE NOT NULL,
         password VARCHAR(255) NOT NULL
     );

     -- Insert sample admin user (username: admin, password: password123)
     INSERT INTO admins (username, password) VALUES
     ('admin', '$2b$10$J9A8hj7VJhVsMLoHdkx4aeZXwrOoTG9N75p7m6.QzQRG7Y8qL.QYf');
     ```

     > **Note:** The password is hashed using `bcrypt`. You’ll implement the hashing later.

5. **Confirm Database Connection Details:**  
   - Database Host: `127.0.0.1`  
   - Port: `3306`  
   - Username: `root`  
   - Password: (leave blank for default setup)

---

### **Step 3: Backend Development**

#### **3.1 Install Dependencies**
1. Open your terminal, navigate to the `backend/` folder, and initialize a Node.js project:
   ```bash
   cd backend
   npm init -y
   ```
2. Install the required dependencies:
   ```bash
   npm install express mysql2 bcrypt jsonwebtoken dotenv cors body-parser
   ```

#### **3.2 Configure Database Connection**  
Create `backend/config/db.js`:
```javascript
const mysql = require('mysql2');
require('dotenv').config();

const connection = mysql.createConnection({
    host: '127.0.0.1',
    user: 'root',
    password: '',
    database: 'paidphone'
});

connection.connect((err) => {
    if (err) {
        console.error('Database connection failed:', err.message);
        return;
    }
    console.log('Connected to the database');
});

module.exports = connection;
```

#### **3.3 Create Admin Model**  
Create `backend/api/models/Admin.js`:
```javascript
const db = require('../../config/db');
const bcrypt = require('bcrypt');

const findByUsername = async (username) => {
    const query = 'SELECT * FROM admins WHERE username = ?';
    const [rows] = await db.promise().query(query, [username]);
    return rows[0];
};

const checkPassword = async (storedPassword, inputPassword) => {
    return await bcrypt.compare(inputPassword, storedPassword);
};

module.exports = { findByUsername, checkPassword };
```

#### **3.4 Implement Login Logic**  
Create `backend/api/controllers/AuthController.js`:
```javascript
const jwt = require('jsonwebtoken');
const Admin = require('../models/Admin');
require('dotenv').config();

const login = async (req, res) => {
    const { username, password } = req.body;

    try {
        const admin = await Admin.findByUsername(username);
        if (!admin || !(await Admin.checkPassword(admin.password, password))) {
            return res.status(401).json({ message: 'Invalid credentials' });
        }

        const token = jwt.sign({ id: admin.id }, process.env.JWT_SECRET, { expiresIn: '1h' });
        res.json({ token });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Internal server error' });
    }
};

module.exports = { login };
```

#### **3.5 Define Authentication Route**  
Create `backend/api/routes/auth.js`:
```javascript
const express = require('express');
const router = express.Router();
const { login } = require('../controllers/AuthController');

router.post('/login', login);

module.exports = router;
```

#### **3.6 Set Up the Express Server**  
Create `backend/server.js`:
```javascript
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const authRoutes = require('./api/routes/auth');
require('dotenv').config();

const app = express();

app.use(cors());
app.use(bodyParser.json());
app.use(express.static('public')); // Serve frontend files

app.use('/api/auth', authRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
```

#### **3.7 Add Environment Variables**  
Create `backend/.env`:
```env
DB_HOST=127.0.0.1
DB_USER=root
DB_PASSWORD=
DB_NAME=paidphone
JWT_SECRET=your_secret_key
```

---

### **Step 4: Frontend Development**

#### **4.1 Create Login Page**  
Create `public/index.html`:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Secure Login</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="login-container">
        <h1>Login</h1>
        <form id="login-form">
            <input type="text" id="username" placeholder="Username" required />
            <input type="password" id="password" placeholder="Password" required />
            <button type="submit">Login</button>
        </form>
        <p id="error-message"></p>
    </div>
    <script src="login.js"></script>
</body>
</html>
```

#### **4.2 Add JavaScript Logic**  
Create `public/login.js`:
```javascript
document.getElementById('login-form').addEventListener('submit', async (e) => {
    e.preventDefault();

    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    try {
        const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, password }),
        });

        const data = await response.json();
        if (response.ok) {
            alert('Login successful!');
            console.log('Token:', data.token);
        } else {
            document.getElementById('error-message').textContent = data.message;
        }
    } catch (error) {
        console.error(error);
    }
});
```

#### **4.3 Add Styling**  
Create `public/style.css`:
```css
body {
    font-family: Arial, sans-serif;
    background-color: #f3f3f3;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.login-container {
    background: #fff;
    padding: 20px;
    border-radius: 5px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
}

input {
    width: 90%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ddd;
    border-radius: 4px;
}

button {
    width: 100%;
    padding: 10px;
    background: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background: #0056b3;
}
```

---

### **Step 5: Test the Application**

1. **Start the Backend Server:**  
   Navigate to the `backend` directory and run:  
   ```bash
   node server.js
   ```

2. **Access the Application:**  
   Open your browser and go to `http://127.0.0.1:5000`.

3. **Test Login Functionality:**  
   - Enter username: `admin`  
   - Enter password: `password123`  
   - Verify login success or error messages.